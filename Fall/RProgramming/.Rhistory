substr(x,1,1) <- toupper(z)
x
#############################################
# tomato1, tomato2, tomato3 생성
y <- paste0("tomato", 1:3)
# 첫번째 t를 T로 바꾸기
sub("t","T", y)
# 모든 t를 T로 바꾸기
gsub("t", "T", y)
#############################################
# 문자열의 일부 삭제는 바꿀 new 부분에 "" 입력
z <- "Everybody cannot do it"
sub("not", "", z)
#############################################
# wikipedia의 html 테이블 자료 활용하기
library(rvest)
URL <- "https://en.wikipedia.org/wiki/World_population"
web <- read_html(URL)
node <-html_nodes(web, xpath = '//*[@id="mw-content-text"]/div/table[6]')
tbl <-html_table(node)
tbl
top <- tbl[[1]]
names(top) <- c("rank", "country", "pop", "area", "density")
str(top)
# 변수 pop( 인구수 )의 평균 계산하기
pop <- top$pop
pop
# 현재 pop 변수는 ','가 포함된 문자열 형태임
pop <- gsub(",", "", pop)
mean(as.numeric(pop))
mean(x)
x <- c(80, 88, 90, 93, 95, 94, 99, 78, 101)
x
mean(x)
(x-mean(x))
# 평균이 0, 분산이 1
(x-mean(x))/sd(x)
x[abs(z) <= 1]
z <- (x-mean(x))/sd(x)
x[abs(z) <= 1]
# z-score의 절대값이 1보다 작은 것들 인덱싱
x[abs(z) <= 1]
# z-score의 절대값이 1보다 크고 2보다 작은 것들 인덱싱
x[abs(z)>1 && abs(z) <= 2]
# z-score의 절대값이 2보다 큰 것들 인덱싱
x[abs(z) > 2]
x <- c(80, 88, 90, 93, 95, 94, 100, 78, 65)
x_1 <- (x>=0) + (x>=80) + (x>90)
cat.x
x <- c(80, 88, 90, 93, 95, 94, 100, 78, 65)
x_1 <- (x>=0) + (x>=80) + (x>90)
cat.x <- factor(x_1, labels = c("C", "B", "A")) # 등급 나누기
cat.x
# z-score의 절대값이 1보다 크고 2보다 작은 것들 인덱싱
x[abs(z)>1 & abs(z) <= 2]
# '이상과 미만'을 기준으로 등급 나누기
x_3 <- 1*(x>=0 & x<80) + 2*(x>=80 & x<90) + 3*(x>=90)
cat.x <- factor(x_3, labels = c("C", "B", "A"))
cat.x
# cut() 함수
cat.x <- cut(x, breaks = c(0, 80, 90, 100), right = FALSE, include.lowest = TRUE, )
cat.x <- cut(x, breaks = c(0, 80, 90, 100), right = FALSE, include.lowest = TRUE,
labels = c("C", "B", "A")
cat.x <- cut(x, breaks = c(0, 80, 90, 100), right = FALSE, include.lowest = TRUE,
labels = c("C", "B", "A"))
cat.x
library(tidyverse)
sort(ex)
ex <- c(24, 28, 31, 25)
sort(ex, decreasing = FALSE)
sort(ex)
sort(ex, decreasing = TRUE)
# order()를 통한 정렬
order(x)
# order()를 통한 정렬
order(ex)
ex[order(ex)]
ex[order(-ex)]
z.Temp <- ((airquality$Temp - mean(airquality$Temp)) / sd(airquality$Temp) )
z.Temp <- with(airquality, (Temp - mean )/sd(Temp))
z.Temp <- with(airquality, (Temp - mean(Temp) )/sd(Temp))
z.Temp <- with(airquality, (Temp - mean(Temp))/sd(Temp)))
z.Temp <- ((airquality$Temp - mean(airquality$Temp)) / sd(airquality$Temp) )
z.Temp <- with(airquality, (Temp - mean(Temp))/sd(Temp))
z.Temp
mean(Temp); mean(Temp)
attach(airquality) # attach는 여러 줄에서 사용할 때 쓴다 !
mean(Temp); mean(Temp)
sd(Temp); sd(Wind)
attach(airquality) # attach는 여러 줄에서 사용할 때 쓴다 !
mean(Temp); mean(Wind)
detach(airquality)
sd(Temp); sd(Wind)
attach(airquality) # attach는 여러 줄에서 사용할 때 쓴다 !
mean(Temp); mean(Wind)
detach(airquality)
sd(Temp); sd(Wind)
detach(airquality)
sd(Temp); sd(Wind)
df1
x <- c(24, 28, 31, 25)
y <- c("F", "M", "F", "F")
z <- c(2000, 3100, 3800, 2800)
df1 <- data.frame(x, y, z)
df1
library(reshape)
install.packages(reshape)
install.packages(reshape)
library(reshape)
install.packages("reshape")
library(reshape)
x <- c(24, 28, 31, 25)
y <- c("F", "M", "F", "F")
z <- c(2000, 3100, 3800, 2800)
df1 <- data.frame(x, y, z)
df1
names(df1) <- c("age", "gender", "income") # 변수 개수가 같아야 함
library(tidyverse) #dplyr 사용을 위해 불러와준다
install.packages("reshape")
library(reshape)
df1 <- rename(df1, c(x="age1", y="gender1"))
install.packages("reshape")
# 응용하기
df1[order(df1$age, df1$gender, -df1$income), ] # 콤마 빼먹지 말기
x <- c(24, 28, 31, 24)
y <- c("F", "M", "F", "F")
z <- c(2000, 3100, 3800, 2800)
df1 <- data.frame(x, y, z)
df1
names(df1) <- c("age", "gender", "income") # 변수 개수가 같아야 함
library(tidyverse) #dplyr 사용을 위해 불러와준다
library(reshape)
df1 <- rename(df1, c(x="age1", y="gender1"))
df1[order(df1$age, df1$gender, -df1$income), ] # 콤마 빼먹지 말기
# 조건에 맞는 값 indexing ; MASS data
library(MASS)
# 조건에 맞는 값 indexing ; MASS data
library(MASS)
names(Cars93)
# 변수 MPG.city가 30보다 큰 값을 갖는 Model
with(Cars93, Cars93[MPG.city > 30, "Model"])
# 변수 Cylinders가 4, Manufacturer가 Hyundai인 자동차의 Model과 Min.Price, Max.Price
attach(Cars93)
# 변수 MPG.city가 30보다 큰 값을 갖는 Model
with(Cars93, Cars93[MPG.city > 30, "Model", "Min.Price", "Max.Price"])
Cars93[Cylinders==4 & Manufacturer=="Hyundai", c("Model", "Min.Price", "Max.Price")]
Cars93[Cylinders==4 & Manufacturer=="Hyundai", c("Model", "Min.Price", "Max.Price")]
row.names(Cars93)
colnames(Cars93)
subset( Cars93, select=Model:MPG.city, # 2 ~ 8번 컬럼 ( 변수 ) 선택
subset = (Cylinders==4 & Manufacturer=="Hyundai"))
# 특정 변수를 제외할 때는 -를 사용한다.
subset( Cars93, select=-(Model:Origin),
subset = (Cylinders==4 & Manufacturer=="Hyundai"))
# split() : 벡터를 요인에 따라 그룹으로 분리
attach(Cars93)
str(x_g)
x_g <- split(MPG.city, Origin)
str(x_g)
# lapply()
lapply(x_g, mean); lapply(x_g, length)
# sapply() : 결과값 벡터 혹은 행렬
sapply(x_g, length)
# tapply() : 요인의 각 수준별로 벡터를 분리하여 함수 적용 ( 다 합친 느낌 )
tapply(MPG.city, Origin, mean)
df2
df2 <- data.frame(name = c("Park", "Lee", "Kim"), A=c(14, 21, 15),
B=c(12, 15, 5), C=c(4, 8, 10))
df2
melt(df2, id.vars = "name")
dcast(df2, name + variable ~ value)
melt(df2, id.vars = "name", variable.name ="item")
melt(df2, id.vars = "name")
melt(df2, id.vars = "name", variable.name ="item")
melt(df2, id.vars = "name", variable.name ="item", value.name = "amount")
melt(df2, id.vars = "name", variable.name ="item", value.name = "amount")
melt(df2, id.vars = "name", variable.names("name", "amount"))
melt(df2, id.vars = "name", variable_name = c("item", "amount"))
melt(df2, id.vars = "name", variable_name = c("item", "amount"))
melt(df2, id.vars = "name", variable_name = c("name", "item", "amount"))
# dcast는 reshape2
install.packages("reshape2")
library(reshape2)
#
library(tidyverse)
ggplot(data=mpg) +
geom_point(mapping=aes (x=hwy,
y=displ))
ggplot(data=mpg) +
geom_bar(mapping=aes (x=displ))
# 그룹별 그래프 작성 : Facet
# facet_wrap() : 범주형 변수가 하나일 때
ggplot(data=mpg) +
geom_point(mapping=aes (x=hwy, y=displ)
facet_wrap( ~class ))
# 그룹별 그래프 작성 : Facet
# facet_wrap() : 범주형 변수가 하나일 때
ggplot(data=mpg) +
geom_point(mapping=aes (x=hwy, y=displ)
facet_wrap( ~ class ))
# 그룹별 그래프 작성 : Facet
# facet_wrap() : 범주형 변수가 하나일 때
ggplot(data=mpg) +
geom_point(mapping=aes (x=hwy, y=displ) +
facet_wrap( ~ class ))
# 그룹별 그래프 작성 : Facet
# facet_wrap() : 범주형 변수가 하나일 때
ggplot(data=mpg) +
geom_point(mapping=aes (x=displ, y=hwy) +
facet_wrap( ~ class ))
# 그룹별 그래프 작성 : Facet
# facet_wrap() : 범주형 변수가 하나일 때
ggplot(data=mpg) +
geom_point(mapping=aes (x=displ, y=hwy) +
facet_wrap( ~class ))
# 그룹별 그래프 작성 : Facet
# facet_wrap() : 범주형 변수가 하나일 때
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy) +
facet_wrap( ~class ))
geom_point(mapping=aes(x=displ, y=hwy) +
facet_wrap( ~class ))
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy) +
facet_wrap( ~class ))
iris%>%head() # tidyverse가 구동된 이후에 사용 가능
mpg %>%
filter(class != "2seater") %>% ggplot() +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap(~ class)
# pipe 사용 필터링 - facet grid
mpg %>%
filter(class != "2seater") %>% ggplot() +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(~ class)
# 실습
install.packages("UsingR")
# 실습
library(UsingR)
state.region
str(state.region)
ggplot(data.frame(state.region)) +
geom_bar(aes(x=state.region)) +
labs(x="Region")
ggplot(data.frame(state.region)) +
geom_bar(aes(x=state.region)) +
labs(x="Region") +
coord_flip()
ggplot(df1, aes(x=state.region, y=Freq)) +
geom_col(fill="steelblue") +
labs(x="Region", y="")
counts <- table(state.region)
df1 <- as.data.frame(counts)
ggplot(df1, aes(x=state.region, y=Freq)) +
geom_col(fill="steelblue") +
labs(x="Region", y="")
bp <- ggplot(data=alltime.movies, mapping = aes(x='', y='Gross')) +
geom_boxplot() +
labs(x='')
bp
bp + coord_flip()
library(UsingR)
bp <- ggplot(data=alltime.movies, mapping = aes(x='', y=Gross)) +
geom_boxplot() +
labs(x='')
bp + coord_flip()
#
ggplot_build(bp)
# ggplot_build
ggplot_build(bp)$data
# ggplot_build
ggplot_build(bp)$data[[1]]
# ggplot_build
ggplot_build(bp)$data[[1]]$outliers
# ggplot_build
ggplot_build(bp)$data[[1]]$outliers[[1]]
my_out <- ggplot_build(bp)$data[[1]]$outliers[[1]]
my_out
my_out <- ggplot_build(bp)$data[[1]]$outliers
my_out <- my_out[[1]]
my_out
my_out <- my_out[[1]]
my_out
my_out
my_out <- ggplot_build(bp)$data[[1]]$outliers[[1]]
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(var="Movie.Title")
top_movies <- alltime %>%
+ filter(alltime, Gross %in% my_out)
my_out <- ggplot_build(bp)$data[[1]]$outliers[[1]]
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(var="Movie.Title")
top_movies <- alltime %>%
+ filter(Gross %in% my_out)
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(var="Movie.Title")
str(alltime.movies)
alltime.movies
str(alltime.movies)
top_movies <- alltime %>%
+ filter(Gross %in% my_out)
alltime <- as_tibble(row.names(alltime.movies)) %>%
+ rownames_to_column(var="Movie.Title")
alltime <- as_tibble(alltime.movies)
alltime
alltime <- rownames_to_column(var="Movie.Title")
alltime <- rownames_to_column(alltime, var="Movie.Title")
top_movies <- alltime %>%
+ filter(Gross %in% my_out)
my_out <- ggplot_build(bp)$data[[1]]$outliers[[1]]
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
top_movies <- alltime %>%
+ filter(Gross %in% my_out)
library(UsingR)
bp <- ggplot(data=alltime.movies, mapping = aes(x='', y=Gross)) +
geom_boxplot() +
labs(x='')
library(UsingR)
bp <- ggplot(data=alltime.movies, mapping = aes(x='', y=Gross)) +
geom_boxplot() +
labs(x='')
bp + coord_flip()
my_out <- ggplot_build(bp)$data[[1]]$outliers[[1]]
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
top_movies <- alltime %>%
+ filter(Gross %in% my_out)
top_movies <- alltime %>%
+ filter(alltime.movies, Gross %in% my_out)
alltime
my_out <- ggplot_build(bp)$data[[1]]$outliers[[1]]
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime
alltime <- as_tibble(alltime.movies, rownames = "") %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies, rownames = "movie") %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies, rownames = "Movie.Title") %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies, rownames = "Movie.Title") %>%
+ rownames_to_column(alltime)
alltime <- as_tibble(alltime.movies, rownames = "Movie.Title") %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime
# ggplot 맛보기
library(tidyverse)
ggplot(data=mpg) +
geom_point(mapping=aes (x=hwy, y=displ))
ggplot(data=mpg) +
geom_bar(mapping=aes (x=displ)) # geom_으로 시작하는 다양한 패키지
##################################
# 그룹별 그래프 작성 : Facet
# facet_wrap() : 범주형 변수가 하나일 때
ggplot(data=mpg) +
geom_point(mapping=aes(x=displ, y=hwy)) +
facet_wrap( ~class )
# pipe
head(iris)
iris%>%head() # tidyverse가 구동된 이후에 사용 가능
# pipe 사용 필터링 - facet wrap
mpg %>%
filter(class != "2seater") %>% ggplot() +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_wrap(~ class)
# pipe 사용 필터링 - facet grid
mpg %>%
filter(class != "2seater") %>% ggplot() +
geom_point(mapping = aes(x=displ, y=hwy)) +
facet_grid(~ class) # 일렬로 나온다
##################################
# 범주형 자료
# input data가 요인인 경우
str(state.region)
ggplot(data.frame(state.region)) +
geom_bar(aes(x=state.region)) +
labs(x="Region") +
coord_flip() # 막대 방향 바뀜
# input data가 도수 분포표인 경우
counts <- table(state.region)
df1 <- as.data.frame(counts)
ggplot(df1, aes(x=state.region, y=Freq)) +
geom_col(fill="steelblue") +
labs(x="Region", y="")
##################################
# 연속형 자료
# 상자 그림 ( boxplot ) 실습
library(UsingR)
bp <- ggplot(data=alltime.movies, mapping = aes(x='', y=Gross)) +
geom_boxplot() +
labs(x='')
bp + coord_flip()
# ggplot_build
my_out <- ggplot_build(bp)$data[[1]]$outliers
my_out <- my_out[[1]] # 처음엔 문제가 없지만 한 번 더 실행하면 601이 나와버림
my_out
my_out <- ggplot_build(bp)$data[[1]]$outliers[[1]]
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime
top_movies <- alltime %>%
+ filter(Gross %in% my_out)
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime.movies, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(.data, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
+ rownames_to_column(var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
rownames_to_column(var="Movie.Title")
alltime
top_movies <- alltime %>%
+ filter(Gross %in% my_out)
alltime <- as_tibble(alltime.movies) %>%
rownames_to_column(alltime, var="Movie.Title")
alltime <- as_tibble(alltime.movies) %>%
rownames_to_column(var="Movie.Title")
alltime
top_movies <- alltime %>%
filter(Gross %in% my_out)
top_movies
alltime <- as_tibble(alltime.movies)[[1]] %>%
rownames_to_column(var="Movie.Title")
alltime <- as_tibble(alltime.movies)[1] %>%
rownames_to_column(var="Movie.Title")
alltime
top_movies <- alltime %>%
filter(Gross %in% my_out)
alltime
top_movies <- alltime %>%
filter(Gross %in% my_out)
top_movies
alltime <- as_tibble(alltime.movies)
alltime <- alltime.movies %>% rownames_to_column(var="Movie.Title") %>%
as_tibble(alltime.movies)
alltime <- alltime.movies %>% rownames_to_column(var="Movie.Title") %>%
as_tibble()
alltime
%>% as_tibble()
%>% as_tibble()
alltime <- alltime.movies %>% rownames_to_column(var="Movie.Title") %>% as_tibble()
alltime
top_movies <- alltime %>%
filter(Gross %in% my_out)
top_movies
women
ggplot(women, aes(x=height, y=weight)) + geom_point()
# 가정 1. 여성의 키가 클수록 몸무게가 높다
cor(women)
lm(y~x, women)
lm(weight~height, women)
# lm, sub, gsub 은 데이터가 먼저 나오지 X
fit <- lm(fomula = weight ~ height, women) # 기울기와 절편이 나온다
# lm, sub, gsub 은 데이터가 먼저 나오지 X
fit <- lm(weight ~ height, women) # 기울기와 절편이 나온다
fit
getwd()
setwd("./Documents/KUS/2022/Fall/RProgramming")
getwd()
a <- 10
print(a)
a <- 10 # 변수 할당 ... 자료형 신경 X
A <- 20 # 대소문자 구분함
print(a)
print(A)
help.start() # 메뉴얼을 보여주는 함수
?print() # 메서드나 모듈 등의 메뉴얼 확인 가능
# 어떤 레포지토리에 어떤 패키지가 있는지는 알 수 없음 ...
#
?CRAN.packages
setRepositories() # interactive 모드로 database 종류 선택 ... CRAN 디폴트
setRepositories() # interactive 모드로 database 종류 선택 ... CRAN 디폴트
install.packages("ggplot2") # ggplot2 패키지 설치
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
variableOne = 1:10
print(variableOne
variableOne = 1:10
variableOne = 1:10
print(variableOne)
variableOne <- 1:10
print(variableOne)
print(variableOne[1])
variableTwo <- c("A", "B", "C")
print(variableTwo[2])
print(length(variableTwo))
length(variableTwo)
variableTwo[2]
variableThree <- c(1, 2, 3, "A", "B")
variableThree
